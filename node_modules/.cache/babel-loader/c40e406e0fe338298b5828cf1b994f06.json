{"ast":null,"code":"var _jsxFileName = \"/Users/Overseer/Desktop/spreeder/options/src/components/Body/Body.tsx\";\nimport React from \"react\";\nimport Navbar from \"../Navbar\";\nimport { connect } from \"react-redux\";\nimport Spreeder from \"./Spreeder\";\nimport Text from \"./Text\";\n\nclass Body extends React.Component {\n  componentDidMount() {\n    var lastScrollTop = 0; // element should be replaced with the actual target element on which you have applied scroll, use window in case of no target element.\n\n    window.addEventListener(\"scroll\", function () {\n      // or window.addEventListener(\"scroll\"....\n      var st = window.pageYOffset || document.documentElement.scrollTop; // Credits: \"https://github.com/qeremy/so/blob/master/so.dom.js#L426\"\n\n      if (st > lastScrollTop) {\n        // downscroll code\n        console.log(\"down\");\n      } else {\n        // upscroll code\n        console.log(\"up\");\n      }\n\n      lastScrollTop = st <= 0 ? 0 : st; // For Mobile or negative scrolling\n    }, false);\n  }\n\n  render() {\n    const active = this.props.active;\n    return React.createElement(\"section\", {\n      className: \"hero is-fullheight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }), active ? React.createElement(Spreeder, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }) : React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    active: state.toggle.spreed\n  };\n};\n\nexport default connect(mapStateToProps)(Body);","map":{"version":3,"sources":["/Users/Overseer/Desktop/spreeder/options/src/components/Body/Body.tsx"],"names":["React","Navbar","connect","Spreeder","Text","Body","Component","componentDidMount","lastScrollTop","window","addEventListener","st","pageYOffset","document","documentElement","scrollTop","console","log","render","active","props","mapStateToProps","state","toggle","spreed"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAMA,MAAMC,IAAN,SAAmBL,KAAK,CAACM,SAAzB,CAA8C;AAC5CC,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,aAAa,GAAG,CAApB,CADkB,CAElB;;AACAC,IAAAA,MAAM,CAACC,gBAAP,CACE,QADF,EAEE,YAAW;AACT;AACA,UAAIC,EAAE,GAAGF,MAAM,CAACG,WAAP,IAAsBC,QAAQ,CAACC,eAAT,CAAyBC,SAAxD,CAFS,CAE0D;;AACnE,UAAIJ,EAAE,GAAGH,aAAT,EAAwB;AACtB;AACAQ,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD,OAHD,MAGO;AACL;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACD;;AACDT,MAAAA,aAAa,GAAGG,EAAE,IAAI,CAAN,GAAU,CAAV,GAAcA,EAA9B,CAVS,CAUyB;AACnC,KAbH,EAcE,KAdF;AAgBD;;AACDO,EAAAA,MAAM,GAAG;AAAA,UACCC,MADD,GACY,KAAKC,KADjB,CACCD,MADD;AAEP,WACE;AAAS,MAAA,SAAS,EAAC,oBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEGA,MAAM,GAAG,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAH,GAAkB,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAF3B,CADF;AAMD;;AA7B2C;;AAgC9C,MAAME,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLH,IAAAA,MAAM,EAAEG,KAAK,CAACC,MAAN,CAAaC;AADhB,GAAP;AAGD,CAJD;;AAMA,eAAetB,OAAO,CAACmB,eAAD,CAAP,CAAyBhB,IAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport Navbar from \"../Navbar\";\nimport { connect } from \"react-redux\";\nimport Spreeder from \"./Spreeder\";\nimport Text from \"./Text\";\n\ninterface BodyProps {\n  active: boolean;\n}\n\nclass Body extends React.Component<BodyProps> {\n  componentDidMount() {\n    var lastScrollTop = 0;\n    // element should be replaced with the actual target element on which you have applied scroll, use window in case of no target element.\n    window.addEventListener(\n      \"scroll\",\n      function() {\n        // or window.addEventListener(\"scroll\"....\n        var st = window.pageYOffset || document.documentElement.scrollTop; // Credits: \"https://github.com/qeremy/so/blob/master/so.dom.js#L426\"\n        if (st > lastScrollTop) {\n          // downscroll code\n          console.log(\"down\");\n        } else {\n          // upscroll code\n          console.log(\"up\");\n        }\n        lastScrollTop = st <= 0 ? 0 : st; // For Mobile or negative scrolling\n      },\n      false\n    );\n  }\n  render() {\n    const { active } = this.props;\n    return (\n      <section className=\"hero is-fullheight\">\n        <Navbar />\n        {active ? <Spreeder /> : <Text />}\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    active: state.toggle.spreed\n  };\n};\n\nexport default connect(mapStateToProps)(Body);\n"]},"metadata":{},"sourceType":"module"}