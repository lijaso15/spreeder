{"ast":null,"code":"var _jsxFileName = \"/Users/Overseer/Desktop/spreeder/options/src/components/Body/Spreeder/Spreeder.tsx\";\n\n/*global chrome*/\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport PlayPause from \"./PlayPause\";\nimport ChangeSpeed from \"./ChangeSpeed\";\nimport FontSize from \"./FontSize\";\nimport { partition, stringToWordArray } from \"../../../utils\";\nimport NumLines from \"./NumLines\";\nimport NumWords from \"./NumWords\";\nimport { setPosition } from \"../../../actions\";\n\nclass Spreeder extends React.Component {\n  componentDidMount() {\n    var lastScrollTop = 0; // element should be replaced with the actual target element on which you have applied scroll, use window in case of no target element.\n\n    element.addEventListener(\"scroll\", function () {\n      // or window.addEventListener(\"scroll\"....\n      var st = window.pageYOffset || document.documentElement.scrollTop; // Credits: \"https://github.com/qeremy/so/blob/master/so.dom.js#L426\"\n\n      if (st > lastScrollTop) {// downscroll code\n      } else {// upscroll code\n        }\n\n      lastScrollTop = st <= 0 ? 0 : st; // For Mobile or negative scrolling\n    }, false);\n  }\n\n  componentWillUnmount() {// window.removeEventListener(\"scroll\", this.handleScroll);\n  }\n\n  render() {\n    const _this$props = this.props,\n          textArray = _this$props.textArray,\n          position = _this$props.position,\n          lines = _this$props.lines,\n          fontSize = _this$props.fontSize;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"has-text-centered\",\n      style: {\n        position: \"absolute\",\n        top: String(44 - 2.5 * lines) + \"vh\",\n        width: \"-webkit-fill-available\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, textArray.length ? textArray[position].map(line => {\n      return React.createElement(\"div\", {\n        className: \"title has-text-white\",\n        style: {\n          marginBottom: 0,\n          fontSize\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, line.join(\" \"));\n    }) : React.createElement(\"div\", {\n      className: \"title has-text-white\",\n      style: {\n        fontSize\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Add text to begin spreeding\")), React.createElement(\"div\", {\n      className: \"hero-foot\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      className: \"tabs is-boxed is-fullwidth\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(ChangeSpeed, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(NumLines, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(PlayPause, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(NumWords, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(FontSize, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    textArray: state.text ? partition(state.lines * state.words, stringToWordArray(state.text)).map(block => {\n      return partition(state.words, block);\n    }) : [],\n    position: state.position,\n    lines: state.lines,\n    fontSize: String(state.size) + \"pt\"\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    increment: () => dispatch(setPosition(\"INCREMENT\")),\n    decrement: () => dispatch(setPosition(\"DECREMENT\"))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Spreeder);","map":{"version":3,"sources":["/Users/Overseer/Desktop/spreeder/options/src/components/Body/Spreeder/Spreeder.tsx"],"names":["React","connect","PlayPause","ChangeSpeed","FontSize","partition","stringToWordArray","NumLines","NumWords","setPosition","Spreeder","Component","componentDidMount","lastScrollTop","element","addEventListener","st","window","pageYOffset","document","documentElement","scrollTop","componentWillUnmount","render","props","textArray","position","lines","fontSize","top","String","width","length","map","line","marginBottom","join","mapStateToProps","state","text","words","block","size","mapDispatchToProps","dispatch","increment","decrement"],"mappings":"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","sourcesContent":["/*global chrome*/\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport PlayPause from \"./PlayPause\";\nimport ChangeSpeed from \"./ChangeSpeed\";\nimport FontSize from \"./FontSize\";\nimport { partition, stringToWordArray } from \"../../../utils\";\nimport NumLines from \"./NumLines\";\nimport NumWords from \"./NumWords\";\nimport { setPosition } from \"../../../actions\";\n\ninterface SpreederProps {\n  textArray: string[][][] | [];\n  position: number;\n  lines: number;\n  fontSize: string;\n  increment(): any;\n  decrement(): any;\n}\n\nclass Spreeder extends React.Component<SpreederProps> {\n  componentDidMount() {\n    var lastScrollTop = 0;\n    // element should be replaced with the actual target element on which you have applied scroll, use window in case of no target element.\n    element.addEventListener(\n      \"scroll\",\n      function() {\n        // or window.addEventListener(\"scroll\"....\n        var st = window.pageYOffset || document.documentElement.scrollTop; // Credits: \"https://github.com/qeremy/so/blob/master/so.dom.js#L426\"\n        if (st > lastScrollTop) {\n          // downscroll code\n        } else {\n          // upscroll code\n        }\n        lastScrollTop = st <= 0 ? 0 : st; // For Mobile or negative scrolling\n      },\n      false\n    );\n  }\n\n  componentWillUnmount() {\n    // window.removeEventListener(\"scroll\", this.handleScroll);\n  }\n\n  render() {\n    const { textArray, position, lines, fontSize } = this.props;\n    return (\n      <div>\n        <div\n          className=\"has-text-centered\"\n          style={{\n            position: \"absolute\",\n            top: String(44 - 2.5 * lines) + \"vh\",\n            width: \"-webkit-fill-available\"\n          }}\n        >\n          {textArray.length ? (\n            textArray[position].map(line => {\n              return (\n                <div\n                  className=\"title has-text-white\"\n                  style={{\n                    marginBottom: 0,\n                    fontSize\n                  }}\n                >\n                  {line.join(\" \")}\n                </div>\n              );\n            })\n          ) : (\n            <div\n              className=\"title has-text-white\"\n              style={{\n                fontSize\n              }}\n            >\n              Add text to begin spreeding\n            </div>\n          )}\n        </div>\n        <div className=\"hero-foot\">\n          <nav className=\"tabs is-boxed is-fullwidth\">\n            <ul>\n              <ChangeSpeed />\n              <NumLines />\n              <PlayPause />\n              <NumWords />\n              <FontSize />\n            </ul>\n          </nav>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    textArray: state.text\n      ? partition(state.lines * state.words, stringToWordArray(state.text)).map(\n          block => {\n            return partition(state.words, block);\n          }\n        )\n      : [],\n    position: state.position,\n    lines: state.lines,\n    fontSize: String(state.size) + \"pt\"\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    increment: () => dispatch(setPosition(\"INCREMENT\")),\n    decrement: () => dispatch(setPosition(\"DECREMENT\"))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Spreeder);\n"]},"metadata":{},"sourceType":"module"}